/*
 * main.c -- A program to print a dot each time button 0 is pressed.
 *
 *  Some useful values:
 *  -- XPAR_AXI_GPIO_1_DEVICE_ID -- xparameters.h
 *  -- XPAR_FABRIC_GPIO_1_VEC_ID -- xparameters.h
 *  -- XGPIO_IR_CH1_MASK         -- xgpio_l.h (included by xgpio.h)
 */
#include <stdio.h>		/* getchar,printf */
#include <stdlib.h>		/* strtod */
#include <stdbool.h>		/* type bool */
#include <unistd.h>		/* sleep */
#include <string.h>

#include "platform.h"		/* ZYBO board interface */
#include "xil_types.h"		/* u32, s32 etc */
#include "xparameters.h"	/* constants used by hardware */

#include "xgpio.h"		/* axi gpio interface */
#include "led.h"
#include "io.h"

#define CHANNEL1 1							/* channel 1 of the GPIO port */

/*
 * controll is passed to this function when a button is pushed
 *
 * devicep -- ptr to the device that caused the interrupt
 */
void btn_handler(u32 btn) {
	if(btn == 0x1){
		led_toggle(0x0);
	}else if(btn == 0x2){
		led_toggle(0x1);
	}else if(btn == 0x4){
		led_toggle(0x2);
	}else if(btn == 0x8){
		led_toggle(0x3);
	}
}

void sw_handler(u32 sw) {
	if(sw == 0x1){
		led_toggle(0x0);
	}else if(sw == 0x2){
		led_toggle(0x1);
	}else if(sw == 0x4){
		led_toggle(0x2);
	}else if(sw == 0x8){
		led_toggle(0x3);
	}
}

int main() {
  init_platform();

  /*
   * set stdin unbuffered, forcing getchar to return immediately when
   * a character is typed.
   */
  setvbuf(stdin,NULL,_IONBF,0);

  //initiate LEDs
  led_init();
  led_set(0x4, true);

  //initiate buttons interface
  io_btn_init(btn_handler);

  //initiate switches interface
  io_sw_init(sw_handler);
  sw_last = XGpio_DiscreteRead(&swport, CHANNEL1);


  printf("[hello]\n"); /* so we are know its alive */

  while (1) {
  	printf(">");
  	char c, str[64] = "";
  	int i = 0;

  	// get characters one by one into str
  	while ((c = getchar()) != '\r') {
  		str[i++] = c;
  		printf("%c", c);
  	}

 	char *ptr;

  	// print "[#]" if is number 0 to 3
  	if (strcmp(str, "0") == 0 || strcmp(str, "1") == 0 || strcmp(str, "2") == 0 || strcmp(str, "3") == 0) {
  		int num = strtol(str, &ptr, 10);

  		led_toggle(num);
  		bool led_state = led_get(num);

  		printf("\n[%d ", num);
  		if (led_state) {
  			printf("on");
  		} else {
  			printf("off");
  		}
  		printf("]");

  	// exit if is 'q' character
  	} else if (strcmp(str, "q") == 0) {
  		printf("\n");

  		break;
  	}

  	printf("\n");
  }

  printf("\n[done]\n");

  //turn off all leds
  led_set(ALL, false);

  //close buttons interface
  io_btn_close();

  //close switches interface
  io_sw_close();

  cleanup_platform();					/* cleanup the hardware platform */
  return 0;
}


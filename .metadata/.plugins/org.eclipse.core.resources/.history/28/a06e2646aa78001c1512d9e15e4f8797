/*
 * main.c -- A program to print a dot each time button 0 is pressed.
 *
 *  Some useful values:
 *  -- XPAR_AXI_GPIO_1_DEVICE_ID -- xparameters.h
 *  -- XPAR_FABRIC_GPIO_1_VEC_ID -- xparameters.h
 *  -- XGPIO_IR_CH1_MASK         -- xgpio_l.h (included by xgpio.h)
 */
#include <stdio.h>		/* getchar,printf */
#include <stdlib.h>		/* strtod */
#include <stdbool.h>		/* type bool */
#include <unistd.h>		/* sleep */
#include <string.h>

#include "platform.h"		/* ZYBO board interface */
#include "xil_types.h"		/* u32, s32 etc */
#include "xparameters.h"	/* constants used by hardware */

#include "xgpio.h"		/* axi gpio interface */
#include "led.h"
#include "io.h"

#define CHANNEL1 1							/* channel 1 of the GPIO port */

/* hidden private state */
static int pushes=0;	       /* variable used to count interrupts */

/*
 * controll is passed to this function when a button is pushed
 *
 * devicep -- ptr to the device that caused the interrupt
 */
void btn_handler(u32 btn) {
	if(btn != 0x0){
		pushes++;
		printf(".");
		fflush(stdout);
	}
	if(btn == 0x1){
		led_toggle(0x0);
	}else if(btn == 0x2){
		led_toggle(0x1);
	}else if(btn == 0x4){
		led_toggle(0x2);
	}else if(btn == 0x8){
		led_toggle(0x3);
	}

	//clear it
	XGpio_InterruptClear(dev, XGPIO_IR_CH1_MASK);

}


int main() {
  init_platform();				

  //initiate LEDs
  led_init();
  led_set(0x4, true);

  //initiate buttons interface
  io_btn_init(btn_handler);

  printf("[hello]\n"); /* so we are know its alive */
  pushes=0;

  while(pushes<20) /* do nothing and handle interrups */
	  ;

  printf("\n[done]\n");

  //turn off all leds
  led_set(ALL, false);

  //close buttons interface
  io_btn_close();

  cleanup_platform();					/* cleanup the hardware platform */
  return 0;
}

